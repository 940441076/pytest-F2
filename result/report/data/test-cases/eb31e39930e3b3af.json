{"uid":"eb31e39930e3b3af","name":"显示官腔分析","fullName":"testcases.imageView.test_imageView.Test_ImageViewPage#test_showLumen","historyId":"a846248bf66ee5e4ba70ff3a48051aaa","time":{"start":1688450230010,"stop":1688450261788,"duration":31778},"description":"显示官腔分析","descriptionHtml":"<p>显示官腔分析</p>\n","status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_imageView.Test_ImageViewPage object at 0x000001CED24F1150>\n\n>   ???\n\nD:\\workspace\\myPytest\\testcases\\imageView\\test_imageView.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pywinauto.application.WindowSpecification object at 0x000001CED3A55C10>\nwait_for_not = 'visible', timeout = 5, retry_interval = 0.09\n\n    def wait_not(self, wait_for_not, timeout=None, retry_interval=None):\n        \"\"\"\n        Wait for the window to not be in a particular state/states.\n    \n        :param wait_for_not: The state to wait for the window to not be in. It can be any\n            of the following states, also you may combine the states by space key.\n    \n             * 'exists' means that the window is a valid handle\n             * 'visible' means that the window is not hidden\n             * 'enabled' means that the window is not disabled\n             * 'ready' means that the window is visible and enabled\n             * 'active' means that the window is active\n    \n        :param timeout: Raise an :func:`pywinauto.timings.TimeoutError` if the window is sill in the\n            state after this number of seconds.\n            Default: :py:attr:`pywinauto.timings.Timings.window_find_timeout`.\n    \n        :param retry_interval: How long to sleep between each retry.\n            Default: :py:attr:`pywinauto.timings.Timings.window_find_retry`.\n    \n        An example to wait until the dialog is not ready, enabled or visible: ::\n    \n            self.Dlg.wait_not(\"enabled visible ready\")\n    \n        .. seealso::\n            :func:`WindowSpecification.wait()`\n    \n            :func:`pywinauto.timings.TimeoutError`\n        \"\"\"\n        check_method_names, timeout, retry_interval = \\\n            self.__parse_wait_args(wait_for_not, timeout, retry_interval)\n>       wait_until(timeout, retry_interval,\n                   lambda: not self.__check_all_conditions(check_method_names, retry_interval))\n\nC:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\application.py:566: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntimeout = 5, retry_interval = 0.09\nfunc = <function WindowSpecification.wait_not.<locals>.<lambda> at 0x000001CED367B880>\nvalue = True, op = <built-in function eq>, args = (), kwargs = {}\nstart = 2683.9646062, func_val = False, time_left = -0.09894789999998466\nerr = TimeoutError('timed out')\n\n    def wait_until(timeout,\n                   retry_interval,\n                   func,\n                   value=True,\n                   op=operator.eq,\n                   *args, **kwargs):\n        r\"\"\"\n        Wait until ``op(function(*args, **kwargs), value)`` is True or until timeout expires\n    \n        * **timeout**  how long the function will try the function\n        * **retry_interval**  how long to wait between retries\n        * **func** the function that will be executed\n        * **value**  the value to be compared against (defaults to True)\n        * **op** the comparison function (defaults to equality)\\\n        * **args** optional arguments to be passed to func when called\n        * **kwargs** optional keyword arguments to be passed to func when called\n    \n        Returns the return value of the function\n        If the operation times out then the return value of the the function\n        is in the 'function_value' attribute of the raised exception.\n    \n        e.g. ::\n    \n            try:\n                # wait a maximum of 10.5 seconds for the\n                # the objects item_count() method to return 10\n                # in increments of .5 of a second\n                wait_until(10.5, .5, self.item_count, 10)\n            except TimeoutError as e:\n                print(\"timed out\")\n        \"\"\"\n        start = timestamp()\n    \n        func_val = func(*args, **kwargs)\n        # while the function hasn't returned what we are waiting for\n        while not op(func_val, value):\n    \n            # find out how much of the time is left\n            time_left = timeout - (timestamp() - start)\n    \n            # if we have to wait some more\n            if time_left > 0:\n                # wait either the retry_interval or else the amount of\n                # time until the timeout expires (whichever is less)\n                time.sleep(min(retry_interval, time_left))\n                func_val = func(*args, **kwargs)\n            else:\n                err = TimeoutError(\"timed out\")\n                err.function_value = func_val\n>               raise err\nE               pywinauto.timings.TimeoutError: timed out\n\nC:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\timings.py:375: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_imageView.Test_ImageViewPage object at 0x000001CED24F1150>\n\n>   ???\nE   assert False\n\nD:\\workspace\\myPytest\\testcases\\imageView\\test_imageView.py:248: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1688449477056,"stop":1688449477108,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_url","time":{"start":1688449477109,"stop":1688449477109,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"environ","time":{"start":1688449477109,"stop":1688449477109,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"_verify_url","time":{"start":1688449477109,"stop":1688449477109,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"_xunit_setup_class_fixture_Test_ImageViewPage","time":{"start":1688450077344,"stop":1688450108251,"duration":30907},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"显示官腔分析","status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_imageView.Test_ImageViewPage object at 0x000001CED24F1150>\n\n>   ???\n\nD:\\workspace\\myPytest\\testcases\\imageView\\test_imageView.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pywinauto.application.WindowSpecification object at 0x000001CED3A55C10>\nwait_for_not = 'visible', timeout = 5, retry_interval = 0.09\n\n    def wait_not(self, wait_for_not, timeout=None, retry_interval=None):\n        \"\"\"\n        Wait for the window to not be in a particular state/states.\n    \n        :param wait_for_not: The state to wait for the window to not be in. It can be any\n            of the following states, also you may combine the states by space key.\n    \n             * 'exists' means that the window is a valid handle\n             * 'visible' means that the window is not hidden\n             * 'enabled' means that the window is not disabled\n             * 'ready' means that the window is visible and enabled\n             * 'active' means that the window is active\n    \n        :param timeout: Raise an :func:`pywinauto.timings.TimeoutError` if the window is sill in the\n            state after this number of seconds.\n            Default: :py:attr:`pywinauto.timings.Timings.window_find_timeout`.\n    \n        :param retry_interval: How long to sleep between each retry.\n            Default: :py:attr:`pywinauto.timings.Timings.window_find_retry`.\n    \n        An example to wait until the dialog is not ready, enabled or visible: ::\n    \n            self.Dlg.wait_not(\"enabled visible ready\")\n    \n        .. seealso::\n            :func:`WindowSpecification.wait()`\n    \n            :func:`pywinauto.timings.TimeoutError`\n        \"\"\"\n        check_method_names, timeout, retry_interval = \\\n            self.__parse_wait_args(wait_for_not, timeout, retry_interval)\n>       wait_until(timeout, retry_interval,\n                   lambda: not self.__check_all_conditions(check_method_names, retry_interval))\n\nC:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\application.py:566: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntimeout = 5, retry_interval = 0.09\nfunc = <function WindowSpecification.wait_not.<locals>.<lambda> at 0x000001CED367B880>\nvalue = True, op = <built-in function eq>, args = (), kwargs = {}\nstart = 2683.9646062, func_val = False, time_left = -0.09894789999998466\nerr = TimeoutError('timed out')\n\n    def wait_until(timeout,\n                   retry_interval,\n                   func,\n                   value=True,\n                   op=operator.eq,\n                   *args, **kwargs):\n        r\"\"\"\n        Wait until ``op(function(*args, **kwargs), value)`` is True or until timeout expires\n    \n        * **timeout**  how long the function will try the function\n        * **retry_interval**  how long to wait between retries\n        * **func** the function that will be executed\n        * **value**  the value to be compared against (defaults to True)\n        * **op** the comparison function (defaults to equality)\\\n        * **args** optional arguments to be passed to func when called\n        * **kwargs** optional keyword arguments to be passed to func when called\n    \n        Returns the return value of the function\n        If the operation times out then the return value of the the function\n        is in the 'function_value' attribute of the raised exception.\n    \n        e.g. ::\n    \n            try:\n                # wait a maximum of 10.5 seconds for the\n                # the objects item_count() method to return 10\n                # in increments of .5 of a second\n                wait_until(10.5, .5, self.item_count, 10)\n            except TimeoutError as e:\n                print(\"timed out\")\n        \"\"\"\n        start = timestamp()\n    \n        func_val = func(*args, **kwargs)\n        # while the function hasn't returned what we are waiting for\n        while not op(func_val, value):\n    \n            # find out how much of the time is left\n            time_left = timeout - (timestamp() - start)\n    \n            # if we have to wait some more\n            if time_left > 0:\n                # wait either the retry_interval or else the amount of\n                # time until the timeout expires (whichever is less)\n                time.sleep(min(retry_interval, time_left))\n                func_val = func(*args, **kwargs)\n            else:\n                err = TimeoutError(\"timed out\")\n                err.function_value = func_val\n>               raise err\nE               pywinauto.timings.TimeoutError: timed out\n\nC:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\timings.py:375: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_imageView.Test_ImageViewPage object at 0x000001CED24F1150>\n\n>   ???\nE   assert False\n\nD:\\workspace\\myPytest\\testcases\\imageView\\test_imageView.py:248: AssertionError","steps":[{"name":"显示官腔分析","time":{"start":1688450234194,"stop":1688450242136,"duration":7942},"status":"broken","statusMessage":"pywinauto.timings.TimeoutError: timed out\n","statusTrace":"  File \"D:\\workspace\\myPytest\\testcases\\imageView\\test_imageView.py\", line 228, in test_showLumen\n  File \"C:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\application.py\", line 566, in wait_not\n    wait_until(timeout, retry_interval,\n  File \"C:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\timings.py\", line 375, in wait_until\n    raise err\n","steps":[],"attachments":[{"uid":"a2f50e7627e21b15","name":"不显示官腔分析","source":"a2f50e7627e21b15.jpg","type":"image/jpg","size":155258}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1}],"attachments":[{"uid":"c9ecc8be2ca86702","name":"异常截图","source":"c9ecc8be2ca86702.jpg","type":"image/jpg","size":155258},{"uid":"c0394d746440eac2","name":"timed out","source":"c0394d746440eac2.txt","type":"text/plain","size":0}],"parameters":[],"stepsCount":1,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"_xunit_setup_class_fixture_Test_ImageViewPage::0","time":{"start":1688450789040,"stop":1688450789040,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"图像查看界面"},{"name":"tag","value":"run(order=4)"},{"name":"parentSuite","value":"testcases.imageView"},{"name":"suite","value":"test_imageView"},{"name":"subSuite","value":"Test_ImageViewPage"},{"name":"host","value":"DESKTOP-8BNU2EL"},{"name":"thread","value":"7516-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.imageView.test_imageView"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=4)"]},"source":"eb31e39930e3b3af.json","parameterValues":[]}